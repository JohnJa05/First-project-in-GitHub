#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define MAX_MSG_LEN 256
#define TOKEN "TOKEN"
#define STOP "STOP"

void process(int id, int n, int pipes[][2]) {
    char buffer[MAX_MSG_LEN];
    int next = (id + 1) % n;
    int prev = (id - 1 + n) % n;

    while (1) {
        read(pipes[id][0], buffer, sizeof(buffer));

        if (strcmp(buffer, TOKEN) == 0) {
            printf("Process %d received the TOKEN from Process %d\n", id, prev);

            if (id == 0 && strcmp(buffer, TOKEN) == 0) {
                static int first_token = 0;
                if (first_token) {
                    // Steile STOP se olous
                    write(pipes[next][1], STOP, strlen(STOP) + 1);
                    break;
                }
                first_token = 1;
            }

            char choice;
            printf("Process %d: Theleis na steileis minyma? (y/n): ", id);
            scanf(" %c", &choice);
            getchar(); // Katharismos newline

            if (choice == 'y' || choice == 'Y') {
                char msg[MAX_MSG_LEN];
                printf("Process %d: Grafe to minyma: ", id);
                fgets(msg, sizeof(msg), stdin);
                msg[strcspn(msg, "\n")] = '\0'; // Afairesi newline

                char full_msg[MAX_MSG_LEN];
                snprintf(full_msg, sizeof(full_msg), "Process %d: %s", id, msg);

                write(pipes[next][1], full_msg, strlen(full_msg) + 1);
            } else {
                write(pipes[next][1], TOKEN, strlen(TOKEN) + 1);
            }

        } else if (strcmp(buffer, STOP) == 0) {
            printf("Process %d: Received STOP. Exiting...\n", id);
            if (id != 0) {
                write(pipes[next][1], STOP, strlen(STOP) + 1);
            }
            break;

        } else if (strncmp(buffer, "Process", 7) == 0) {
            printf("Process %d received msg from %s\n", id, buffer);
            if (strstr(buffer, buffer + 8) != NULL && atoi(buffer + 8) == id) {
                // To minyma epestrepse ston apostolea
                write(pipes[next][1], TOKEN, strlen(TOKEN) + 1);
            } else {
                write(pipes[next][1], buffer, strlen(buffer) + 1);
            }
        }
    }

    close(pipes[id][0]);
    close(pipes[next][1]);
    exit(0);
}

int main() {
    int n;
    printf("Dose arithmo diergasion: ");
    scanf("%d", &n);

    if (n < 2) {
        fprintf(stderr, "Apaiteitai touleaston 2 diergasies.\n");
        exit(EXIT_FAILURE);
    }

    int pipes[n][2];

    for (int i = 0; i < n; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("pipe");
            exit(EXIT_FAILURE);
        }
    }

    for (int i = 0; i < n; i++) {
        pid_t pid = fork();

        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid == 0) {
            for (int j = 0; j < n; j++) {
                if (j != i) close(pipes[j][0]);
                if (j != (i + 1) % n) close(pipes[j][1]);
            }
            process(i, n, pipes);
        }
    }

    // To main (goniki) steile to TOKEN sti diergasia 0
    write(pipes[0][1], TOKEN, strlen(TOKEN) + 1);

    for (int i = 0; i < n; i++) {
        wait(NULL);
    }

    return 0;
}
